(ns benchmark.core)
(require '[utility.core :as util])
(require '[testfunction.core :as atf])
(require '[algorithm.swarm :as psa])
(require '[clojure.pprint :as pp])

(defn getBest []
  (last (sort-by psa/fitness (map deref psa/groupBest))))

(def sSize 512)
(def nIter 100)
(psa/setSwarmProperties 2 10 sSize 600 (fn [a] (-(atf/h4 a))))

(println (str "particle swarm optimization with " nIter " iterations and " sSize " particles took: "))
(def startTime (System/currentTimeMillis))
(def outSwarm (psa/psSync nIter map))
(def deltaTime (- (System/currentTimeMillis) startTime))
(println (str deltaTime " ms"))
;;(pp/pprint outSwarm)
(print "Best position should be (0.00 +- 0.005, 0.00 +- 0.005). Swarm calculated ")
(pp/pprint (getBest))
(psa/resetPs)
(println "--------------------------------------------------------------------------------------")

(println (str "parallel particle swarm optimization with " nIter " iterations and " sSize " particles took: "))
(def startTime (System/currentTimeMillis))
(def outSwarm (psa/psSync nIter pmap))
(def deltaTime (- (System/currentTimeMillis) startTime))
(println (str deltaTime " ms"))
;;(pp/pprint outSwarm)
(print "Best position should be (0.00 +- 0.005, 0.00 +- 0.005). Swarm calculated ")
(pp/pprint (getBest))
(psa/resetPs)
(println "--------------------------------------------------------------------------------------")

(println (str "parallel asynchronous particle swarm optimization with " deltaTime "ms yielded"))
;; needs dummy int because felix is dummy
(first(psa/ps 1.0))
(Thread/sleep deltaTime)
(psa/stopPs)
(println (str(apply + (map :iterations (map deref psa/swarm)))) " iterations")
(print "Best position should be (0.00 +- 0.005, 0.00 +- 0.005). Swarm calculated ")
(pp/pprint (getBest))
(psa/resetPs)
;;(println (apply + (map :iterations outSwarm)))
